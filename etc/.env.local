### Fireworks ###
PROJECT_NAME="fireworks"

# Set the Machine ID on Debian host
MACHINE_ID="87ea4745cb1941c98a4868705f145666"

### Deployment ###
DEPLOYMENT_MODE=''

### Github ###
GITHUB_SSH_KEY='' # Used for pulling private registries
GIT_COMMIT_HASH='development' # Filled in later using the actual commit hash. Used for image tags

### Docker ###
DOCKER_BUILDKIT=1
CONTAINER_REGISTRY_URL_FULL='k3d-fireworks.localhost:5000'
CONTAINER_REGISTRY_URL='localhost'
CONTAINER_REGISTRY_PORT=5000
FEATURE_FLAG_DOCKER=1
FEATURE_FLAG_DOCKER_REGISTRY=1

### Host Configuration ##
# These values are set at runtime by a pre-init script.
# Placeholders are included here for completeness.
HOST_USER_ID=""
HOST_GROUP_ID=""
HOST_OCI_ENGINE="docker" # your oci engine, defaults to docker. #TODO make this compatible with podman
HOST_DOCKER_GID=""
HOST_MACHINE_ID=""
HOST_IP=""
HOST_GPU_STATUS=false



### Framework Versions ###
# For packages which are built from source, we need to specify the version number and hash
SPARK_VERSION=3.3.2
SPARK_SHA512="347fd9029128b12e7b05e9cd7948a5b571a57f16bbbbffc8ad4023b4edc0e127cffd27d66fcdbf5f926fa33362a2ae4fc0a8d59ab3abdaa1d4c4ef1e23126932  spark-3.3.2-bin-without-hadoop.tgz"
SPARK_HOME=/opt/spark
FEATURE_FLAG_SPARK=1

HADOOP_VERSION=3.3.4
HADOOP_SHA512="ca5e12625679ca95b8fd7bb7babc2a8dcb2605979b901df9ad137178718821097b67555115fafc6dbf6bb32b61864ccb6786dbc555e589694a22bf69147780b4  hadoop-3.3.4.tar.gz"
HADOOP_HOME=/opt/hadoop



### Kafka ###
KAFKA_BOOTSTRAP_SERVER="kafka.default.svc.cluster.local"
KAFKA_BOOTSTRAP_SERVER_PORT="9092"
KAFKA_BOOTSTRAP_SERVERS="kafka.default.svc.cluster.local:9092"
FEATURE_FLAG_KAFKA=1

### S3 ###
# Define two S3 buckets, one for "in-cluster" aka local
# and one for "out-of-cluster" aka cloud.

# For the "Local" deployment, we use a local minio instance
S3_LOCAL_ACCESS_KEY_ID='TODO_CHANGE_ME'
S3_LOCAL_SECRET_ACCESS_KEY='THIS_IS_A_SECRET_TODO_CHANGE_ME'
S3_LOCAL_DEFAULT_REGION='us-west-2'
S3_LOCAL_ENDPOINT_URL='http://minio.default.svc.cluster.local:9000'
S3_LOCAL_BUCKET_NAME='fireworks'
FEATURE_FLAG_S3_LOCAL_STORAGE=1

# For the "Cloud" deployment, we use a cloud S3 instance (or a local minio instance on another machine)
# It is assumed that this cloud instance is not deleted when the cluster is deleted
S3_CLOUD_ACCESS_KEY_ID='UTMs2xbPYleLRdKs1sT7'
S3_CLOUD_SECRET_ACCESS_KEY='TUiPgi2obcId2ev164xk'
S3_CLOUD_DEFAULT_REGION='us-west-2'
S3_CLOUD_ENDPOINT_URL='http://10.0.0.232:9000'
S3_CLOUD_BUCKET_NAME='fireworks-cloud'
FEATURE_FLAG_S3_CLOUD_STORAGE=1


### Cloud Storage ###
# TODO make generic for any cloud storage
FEATURE_FLAG_CLOUD_STORAGE=1



### DataFlow ###
FEATURE_FLAG_DATAFLOW=1


# S3_ACCESS_KEY_ID='TODO_CHANGE_ME'
# S3_SECRET_ACCESS_KEY='THIS_IS_A_SECRET_TODO_CHANGE_ME'
# S3_DEFAULT_REGION='us-west-2'
# S3_ENDPOINT_URL='http://minio.default.svc.cluster.local:9000'
# S3_BUCKET_NAME='fireworks'

# LOCAL_DATA_DIR='/workspace/tmp/data'
### MinIO Local Staging Semi-Permanent ###
# S3_ACCESS_KEY_ID='UTMs2xbPYleLRdKs1sT7'
# S3_SECRET_ACCESS_KEY='TUiPgi2obcId2ev164xk'
# S3_ENDPOINT_URL='http://10.0.0.232:9000'
# S3_DEFAULT_REGION='us-west-2'
# S3_BUCKET_NAME='fireworks-staging'

## Spark ##
# SPARK_LOCAL_IP="127.0.1.1"

### PostgreSQL ###
POSTGRES_USER='pguser'
POSTGRES_PASSWORD='THIS_IS_A_SECRET_TODO_CHANGE_ME'
POSTGRES_DEFAULT_DB='postgres'
POSTGRES_URL="postgresql.default.svc.cluster.local"
POSTGRES_PORT=5432
JDBC_CONNECTION_STRING=jdbc:postgresql://postgresql.default.svc.cluster.local:5432/postgres
DATABASE_URL=postgres://pguser:THIS_IS_A_SECRET_TODO_CHANGE_ME@postgresql.default.svc.cluster.local:5432/postgres
FEATURE_FLAG_POSTGRES=1


### Project Nessie ###
NESSIE_SERVER_URI="http://nessie.default.svc.cluster.local:19120/api/v1"
NESSIE_VERSION="0.58.1"

### Superset ###
SUPERSET_DATABASE_URI=postgresql://pguser:THIS_IS_A_SECRET_TODO_CHANGE_ME@postgresql:5432/postgres
SUPERSET_URL=http://superset.default.svc.cluster.local:8088
# TODO make a database in Superset from helm

### Hive Metastore ###
METASTORE_HOME=/opt/hive-metastore
METASTORE_DB_NAME=hive_metastore
METASTORE_URL="hive-metastore.default.svc.cluster.local"
METASTORE_PORT=9083

### Kyuubi ###
HIVE_THRIFT="kyuubi-thrift-binary.default.svc.cluster.local"
KYUUBI_HOME=/opt/kyuubi


### HADOOP ###
HADOOP_HOME=/opt/hadoop



### Solr ###

SOLR_URL='http://solr.default.svc.cluster.local:8983'
SOLR_PORT=8983
SOLR_USERNAME='admin'
SOLR_PASSWORD='3gzOwNhko'
SOLR_DEFAULT_CORE='fireworks'

### Open Search ###
OPENSEARCH_URL='https://opensearch-cluster-master.default.svc.cluster.local:9200'
OPENSEARCH_HOST="opensearch-cluster-master.default.svc.cluster.local"
OPENSEARCH_PORT="9200"
OPENSEARCH_USERNAME='admin'
OPENSEARCH_PASSWORD='admin'

### Jaeger ###
JAEGER_URL='http://jaeger-agent.default.svc.cluster.local:16686'


### CUDA ###
CUDA_VERSION="12"
CUDA_HOME="/usr/local/cuda"
NVIDIA_DRIVER_VERSION="525.60.13"

### Supabase ###
# SITE_URL=http://192.0.2.0:3000
# API_EXTERNAL_URL=http://192.0.2.0:8000
# STUDIO_PORT=3000
# PUBLIC_REST_URL=http://192.0.2.0:8000/rest/v1/

# ### Customer Analytics ###
# REACT_APP_GOOGLE_ANALYTICS_GTAG='G-XXXXXXXXXX'
# REACT_APP_AMPLITUDE_ANALYTICS_API_KEY='XXXXXXXXX'
# REACT_APP_MIXPANEL_ANALYTICS_KEY='XXXXXXXXX'

# ### OPEN AI ###
# OPENAI_API_KEY='XXXXXXXXX'

# ### TODO parse this from Quadratic and condense
# REACT_APP_GOOGLE_ANALYTICS_GTAG=G-0000000000
# REACT_APP_AMPLITUDE_ANALYTICS_API_KEY=
# REACT_APP_MIXPANEL_ANALYTICS_KEY=
# REACT_APP_SENTRY_DSN=https://xxxxxxxxxxxxxxxxxx@xxxxxxxxxxxx.ingest.sentry.io/xxxxxxxxxxxx
# # // use =1 to enable debug flags
# REACT_APP_DEBUG=0 
# REACT_APP_AUTH0_DOMAIN=auth-dev.quadratic.to
# REACT_APP_AUTH0_CLIENT_ID=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# REACT_APP_AUTH0_AUDIENCE=https://localhost:8000
# REACT_APP_AUTH0_ISSUER=https://auth-dev.quadratic.to/
# REACT_APP_QUADRATIC_API_URL=http://localhost:8000

### Rust ###
RUST_BACKTRACE=full

POLYGON_API_KEY="RzuEsVJrcAOTDAnTPkasj7drnQlslLDm"
POLYGON_URL="wss://socket.polygon.io/"
FEATURE_FLAG_POLYGON_WS_STOCKS=1
FEATURE_FLAG_POLYGON_WS_OPTIONS=1
FEATURE_FLAG_POLYGON_WS_INDICES=1


### Websocket Middleware ###
FEATURE_FLAG_WEBSOCKET_MIDDLEWARE=1



### NGROK ###
NGROK_DOMAIN="demo.fireworks.ngrok.dev"
# NGROK_DIR="$HOME/.ngrok"
NGROK_AUTHTOKEN="2RLlOczXct52xbK7dkPLveg9DTD_89vjhnMqPX4sMDM6tzJ12"
NGROK_API_KEY="2T8r8aN81b4kEIcIiZszyL164Ks_7eM8xPHR1B9CDTv7JCFt6"


### Domains ###
SUBDOMAIN_API="api.fireworks.ngrok.dev"
SUBDOMAIN_APP="app.fireworks.ngrok.dev"
SUBDOMAIN_ADMIN="admin.fireworks.ngrok.dev"

TLS_SECRET="tls-certificate"


OTEL_EXPORTER_JAEGER_AGENT_HOST="jaeger-agent.default.svc.cluster.local"
OTEL_EXPORTER_JAEGER_AGENT_PORT="6831"

### Protobuf Compiler ###
PROTOC=/usr/bin/protoc