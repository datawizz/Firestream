# Set root logger level
log4j.rootCategory={{ log_level | default(value="INFO") }}, console{% if file_logging %}, file{% endif %}

# Console appender
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.err
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n

{% if file_logging %}
# File appender
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File={{ log_file_path | default(value="/tmp/spark-app.log") }}
log4j.appender.file.MaxFileSize={{ log_file_size | default(value="100MB") }}
log4j.appender.file.MaxBackupIndex={{ log_file_count | default(value="10") }}
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n
{% endif %}

# Settings to quiet third party logs
log4j.logger.org.apache.spark=WARN
log4j.logger.org.spark_project.jetty=WARN
log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle=ERROR
log4j.logger.org.apache.hadoop=WARN
log4j.logger.org.apache.parquet=ERROR
log4j.logger.parquet=ERROR

# Python specific
log4j.logger.py4j=WARN
log4j.logger.py4j.java_gateway=ERROR

# SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs
log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL
log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR

{% for logger in custom_loggers %}
log4j.logger.{{ logger.name }}={{ logger.level }}
{% endfor %}
