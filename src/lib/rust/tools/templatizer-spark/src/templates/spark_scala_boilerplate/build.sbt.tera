name := "{{ app_name }}"
organization := "{{ organization }}"
version := "{{ version }}"
scalaVersion := "{{ scala_version | default(value="2.13.15") }}"

val sparkVersion = "{{ spark_version | default(value="3.5.1") }}"
{% if hadoop_version %}val hadoopVersion = "{{ hadoop_version }}"{% endif %}
{% if delta_enabled %}val deltaVersion = "{{ delta_version | default(value="2.4.0") }}"{% endif %}

libraryDependencies ++= Seq(
  // Spark dependencies (provided by cluster)
  "org.apache.spark" %% "spark-core" % sparkVersion % "provided",
  "org.apache.spark" %% "spark-sql" % sparkVersion % "provided",
  {% if streaming_enabled %}"org.apache.spark" %% "spark-streaming" % sparkVersion % "provided",{% endif %}
  {% if mllib_enabled %}"org.apache.spark" %% "spark-mllib" % sparkVersion % "provided",{% endif %}

  // Configuration management
  "com.typesafe" % "config" % "1.4.2",

  // Logging
  "org.slf4j" % "slf4j-api" % "1.7.36" % "provided",
  "org.apache.logging.log4j" % "log4j-core" % "2.17.2" % "provided",

  {% if s3_enabled %}
  // AWS SDK for S3
  "org.apache.hadoop" % "hadoop-aws" % hadoopVersion % "provided",
  "com.amazonaws" % "aws-java-sdk-bundle" % "1.12.262" % "provided",
  {% endif %}

  {% if delta_enabled %}
  // Delta Lake support
  "io.delta" %% "delta-core" % deltaVersion % "provided",
  {% endif %}

  {% if additional_dependencies %}
  {% for dep in additional_dependencies %}
  "{{ dep.group }}" {% if dep.scala_version %}%%{% else %}%{% endif %} "{{ dep.artifact }}" % "{{ dep.version }}"{% if dep.provided %} % "provided"{% endif %},
  {% endfor %}
  {% endif %}

  // Testing
  "org.scalatest" %% "scalatest" % "3.2.15" % Test
)

{% if dependency_overrides %}
// Dependency overrides to resolve conflicts
dependencyOverrides ++= Seq(
  {% for override in dependency_overrides %}
  "{{ override.group }}" % "{{ override.artifact }}" % "{{ override.version }}"{% if not loop.last %},{% endif %}
  {% endfor %}
)
{% endif %}

// Assembly plugin configuration
assembly / assemblyMergeStrategy := {
  case PathList("META-INF", xs @ _*) =>
    xs match {
      case "MANIFEST.MF" :: Nil => MergeStrategy.discard
      case "services" :: _ => MergeStrategy.filterDistinctLines
      case _ => MergeStrategy.discard
    }
  case "reference.conf" => MergeStrategy.concat
  case "application.conf" => MergeStrategy.concat
  case x if x.endsWith(".proto") => MergeStrategy.first
  case x =>
    val oldStrategy = (assembly / assemblyMergeStrategy).value
    oldStrategy(x)
}

// Exclude Scala library from assembly
assembly / assemblyOption := (assembly / assemblyOption).value.withIncludeScala(false)

// Name the output JAR
assembly / assemblyJarName := s"${name.value}-${version.value}.jar"

// Test settings
Test / fork := true
Test / javaOptions ++= Seq(
  "-Xmx2G",
  "-XX:+UseG1GC",
  // Java 11+ module access for Spark
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.net=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
  "--add-opens=java.base/sun.security.action=ALL-UNNAMED",
  "--add-opens=java.base/sun.security.util=ALL-UNNAMED",
  "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED"
)

// Scalac options
scalacOptions ++= Seq(
  "-deprecation",
  "-unchecked",
  "-feature",
  "-Xlint",
  "-Ywarn-dead-code",
  "-Ywarn-numeric-widen"
)

// For local development with sbt run
Compile / run := Defaults.runTask(
  Compile / fullClasspath,
  Compile / run / mainClass,
  Compile / run / runner
).evaluated

// Runtime Java options for spark-submit and sbt run
Compile / javaOptions ++= Seq(
  "--add-opens=java.base/java.lang=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
  "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
  "--add-opens=java.base/java.io=ALL-UNNAMED",
  "--add-opens=java.base/java.net=ALL-UNNAMED",
  "--add-opens=java.base/java.nio=ALL-UNNAMED",
  "--add-opens=java.base/java.util=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
  "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
  "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
  "--add-opens=java.base/sun.security.action=ALL-UNNAMED",
  "--add-opens=java.base/sun.security.util=ALL-UNNAMED",
  "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED"
)

{% if delta_enabled %}
// Add repository for Delta Lake
resolvers += "Delta Lake" at "https://maven.delta.io/"
{% endif %}
