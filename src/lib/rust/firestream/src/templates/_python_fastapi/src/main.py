#!/usr/bin/env python3
"""
FastAPI application generated by Firestream
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import os
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="FastAPI Service",
    description="A FastAPI service generated by Firestream",
    version="1.0.0"
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Models
class HealthResponse(BaseModel):
    status: str
    service: str
    version: str

class MessageResponse(BaseModel):
    message: str

# Routes
@app.get("/", response_model=MessageResponse)
async def root():
    """Root endpoint"""
    return MessageResponse(message="Welcome to FastAPI service!")

@app.get("/health", response_model=HealthResponse)
async def health():
    """Health check endpoint"""
    return HealthResponse(
        status="healthy",
        service="fastapi-service",
        version="1.0.0"
    )

@app.get("/api/v1/hello/{name}", response_model=MessageResponse)
async def hello(name: str):
    """Personalized greeting endpoint"""
    if not name:
        raise HTTPException(status_code=400, detail="Name cannot be empty")
    return MessageResponse(message=f"Hello, {name}!")

# Main entry point
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))
    host = os.environ.get("HOST", "0.0.0.0")
    
    logger.info(f"Starting FastAPI server on {host}:{port}")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=os.environ.get("ENV", "production") == "development"
    )
