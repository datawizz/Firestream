# Firestream Configuration with Helm Lifecycle
version = "1.0.0"

[project]
name = "my-firestream-project"
environment = "development"

[cluster]
name = "firestream-local"
namespace = "firestream"
container_runtime = "docker"

[cluster.k3d]
name = "firestream-local"
api_port = 6550
http_port = 80
https_port = 443
servers = 1
agents = 2
k3s_version = "v1.31.2-k3s1"

[cluster.k3d.registry]
enabled = true
name = "registry.localhost"
port = 5000

[defaults]
log_level = "info"
timeout_seconds = 300

[defaults.resource_limits]
cpu_cores = 2.0
memory_mb = 4096
disk_gb = 100

# Infrastructure services using Helm lifecycle
[[deployments]]
name = "prometheus-operator"
chart = "prometheus-community/kube-prometheus-stack"
version = "45.7.1"
namespace = "prometheus"

[deployments.values]
prometheus.prometheusSpec.retention = "30d"
prometheus.prometheusSpec.resources.requests.memory = "1Gi"
prometheus.prometheusSpec.resources.limits.memory = "2Gi"
grafana.adminPassword = "changeme"
alertmanager.enabled = false

[[deployments]]
name = "nginx-ingress"
chart = "ingress-nginx/ingress-nginx"
version = "4.7.1"
namespace = "nginx-ingress"

[deployments.values]
controller.service.type = "ClusterIP"
controller.hostNetwork = true
controller.ingressClassResource.default = true
controller.metrics.enabled = true

[[deployments]]
name = "external-dns"
chart = "bitnami/external-dns"
version = "6.31.0"
namespace = "kube-system"

[deployments.values]
provider = "noop"  # For local development
sources = ["service", "ingress"]
policy = "sync"
resources.limits.cpu = "50m"
resources.limits.memory = "100Mi"

# Application services
[[deployments]]
name = "postgresql"
chart = "bitnami/postgresql"
version = "13.2.24"
namespace = "default"

[deployments.values]
auth.enablePostgresUser = true
auth.postgresPassword = "postgres"
auth.database = "firestream"
primary.persistence.enabled = true
primary.persistence.size = "10Gi"
metrics.enabled = true

[[deployments]]
name = "redis"
chart = "bitnami/redis"
version = "18.6.1"
namespace = "default"

[deployments.values]
architecture = "replication"
auth.enabled = false
sentinel.enabled = true
sentinel.quorum = 2
replica.replicaCount = 2
master.persistence.enabled = true
master.persistence.size = "8Gi"

[[deployments]]
name = "kafka"
chart = "strimzi/strimzi-kafka-operator"
version = "0.38.0"
namespace = "kafka"

[deployments.values]
watchAnyNamespace = false
resources.limits.cpu = "500m"
resources.limits.memory = "384Mi"

# Custom application deployment
[[deployments]]
name = "my-app"
chart = "./charts/my-app"  # Local chart
namespace = "default"

[deployments.values]
image.repository = "registry.localhost:5000/my-app"
image.tag = "latest"
replicaCount = 3
service.type = "ClusterIP"
ingress.enabled = true
ingress.className = "nginx"
ingress.hosts = [
    { host = "my-app.local", paths = [{ path = "/", pathType = "Prefix" }] }
]

# Breaking version example
[[deployments]]
name = "elasticsearch"
chart = "elastic/elasticsearch"
version = "8.11.3"
namespace = "elastic"

[deployments.breaking_version]
version = "8.0.0"
requires_uninstall = true
pre_upgrade_commands = [
    "kubectl delete crd --ignore-not-found elasticsearches.elasticsearch.k8s.elastic.co"
]

[deployments.values]
replicas = 1
minimumMasterNodes = 1
resources.requests.cpu = "500m"
resources.requests.memory = "2Gi"
persistence.enabled = true
